{"version":3,"sources":["pages/Results/Container.js","pages/Results/AmbientNoiseLevel.js","pages/Results/SignalToNoiseRatio.js","pages/Results/InfoIcon.js","pages/Results/AcousticEvaluation.js","pages/Results/index.js"],"names":["Container","styled","section","AmbientNoiseLevel","props","x","y","width","height","xDomain","yDomain","margin","left","right","top","bottom","style","line","stroke","text","fontWeight","fontSize","color","data","className","includeMargin","xPercent","yPercent","transform","textAnchor","strokeWidth","opacity","sizeRange","size","useStyles","makeStyles","theme","tableControlFull","SignalToNoiseRatio","signal_to_noise_quality","classes","createData","range","name","icon","highlight","table_data","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","backgroundColor","component","scope","DialogTitle","withStyles","root","padding","spacing","closeButton","position","palette","grey","children","onClose","other","disableTypography","Typography","variant","IconButton","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","InfoIcon","title","content","React","useState","open","setOpen","handleClose","Dialog","aria-labelledby","id","dividers","gutterBottom","math","Button","autoFocus","getEvaluationResults","room_volume","reverberation_time","midfreq_reverberation_time","max_number_guests","guest_clothing_absorption_class","speaking_distance","results","guest_clothing_absorption_factor","absorption_class","toLowerCase","getClothingAbsorptionFactor","equivalent_absorption_area","getEquivalentAbsorptionArea","relative_speaking_group_sizes","ambient_noise_level","relative_speaking_group_size","result","forEach","g","push","Math","log10","getAmbientNoiseLevel","signal_to_noise_ratio","PI","getSignalToNoiseRatio","getSignalToNoiseQuality","acoustic_capacity","parseInt","round","getAcousticCapacity","required_reverberation_time","getRequiredReverberationTime","i","toString","textField","marginLeft","marginRight","formControl","paperControl","buttonControl","textAlign","marginTop","tableControl","expansionHeading","typography","pxToRem","flexBasis","flexShrink","expansionSecondaryHeading","secondary","expansionDetails","flexDirection","createMuiTheme","primary","main","equivalentAbsorptionAreaDescription","String","raw","ambientNoiseLevelDescription","signalToNoiseRatioDescription","acousticCapacityDescription","requiredReverberationTimeDescription","Results","userInput","location","state","console","log","setState","getUserInputParam","value","NaN","item","useEffect","showResults","nom","div","getFloat","_num","parseFloat","toFixed","to","label","Paper","getUserInputValue","Grid","container","direction","alignItems","xs","textDecoration","errorMsg"],"mappings":"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","file":"static/js/7.6fe8e284.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.section`\n  padding: 1em;\n`;\n\nexport default Container;\n","/*\n * AmbientNoiseLevel\n * A dedicated plot to compare the ambient noise level with respect to number of\n * people / acoustic capacity. The quality ranges are based on Lazarus and Rindel.\n */\n\nimport React from 'react';\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  LineSeries,\n  ChartLabel,\n  MarkSeries,\n} from 'react-vis';\n\nexport default function AmbientNoiseLevel(props) {\n  const { x, y } = props;\n  const content = (\n    <XYPlot\n      width={300}\n      height={200}\n      xDomain={[0, 8]}\n      yDomain={[50, 90]}\n      margin={{ left: 40, right: 50, top: 10, bottom: 40 }}\n    >\n      <XAxis\n        style={{\n          line: { stroke: '#000000' },\n          text: { fontWeight: 50, fontSize: 10 },\n        }}\n      />\n      <YAxis\n        style={{\n          line: { stroke: '#000000' },\n          text: { fontWeight: 50, fontSize: 10 },\n        }}\n      />\n      <LineSeries color=\"#0b71b5\" data={[{ x: 0, y: 58 }, { x: 8, y: 58 }]} />\n      <LineSeries color=\"#0b71b5\" data={[{ x: 0, y: 65 }, { x: 8, y: 65 }]} />\n      <LineSeries color=\"#0b71b5\" data={[{ x: 0, y: 71 }, { x: 8, y: 71 }]} />\n      <LineSeries color=\"#0b71b5\" data={[{ x: 0, y: 83 }, { x: 8, y: 83 }]} />\n      <LineSeries color=\"black\" data={[{ x: 0, y: 90 }, { x: 8, y: 90 }]} />\n      <LineSeries color=\"black\" data={[{ x: 8, y: 50 }, { x: 8, y: 90 }]} />\n      <ChartLabel\n        text=\"Num. people / acoustic capacity\"\n        className=\"alt-x-label\"\n        includeMargin={false}\n        xPercent={0.15}\n        yPercent={1.3}\n        style={{\n          fontSize: 10,\n        }}\n      />\n      <ChartLabel\n        text=\"Ambient noise level [dB]\"\n        className=\"alt-y-label\"\n        includeMargin={false}\n        xPercent={-0.15}\n        yPercent={0.2}\n        style={{\n          transform: 'rotate(-90)',\n          textAnchor: 'end',\n          fontSize: 10,\n        }}\n      />\n      <ChartLabel\n        text=\"Good\"\n        includeMargin={false}\n        xPercent={1.11}\n        yPercent={0.9}\n        style={{\n          transform: 'rotate(-45)',\n          textAnchor: 'end',\n          fontSize: 10,\n        }}\n      />\n      <ChartLabel\n        text=\"Satisfactory\"\n        includeMargin={false}\n        xPercent={1.21}\n        yPercent={0.57}\n        style={{\n          transform: 'rotate(-45)',\n          textAnchor: 'end',\n          fontSize: 10,\n        }}\n      />\n      <ChartLabel\n        text=\"Sufficient\"\n        includeMargin={false}\n        xPercent={1.17}\n        yPercent={0.45}\n        style={{\n          transform: 'rotate(-45)',\n          textAnchor: 'end',\n          fontSize: 10,\n        }}\n      />\n      <ChartLabel\n        text=\"Insufficient\"\n        includeMargin={false}\n        xPercent={1.2}\n        yPercent={0.2}\n        style={{\n          transform: 'rotate(-45)',\n          textAnchor: 'end',\n          fontSize: 10,\n        }}\n      />\n      <ChartLabel\n        text=\"Bad\"\n        includeMargin={false}\n        xPercent={1.1}\n        yPercent={0.1}\n        style={{\n          transform: 'rotate(-45)',\n          textAnchor: 'end',\n          fontSize: 10,\n        }}\n      />\n      <MarkSeries\n        strokeWidth={2}\n        opacity=\"0.8\"\n        color=\"red\"\n        sizeRange={[5, 6]}\n        data={[{ x, y, size: 5 }]}\n      />\n    </XYPlot>\n  );\n  return content;\n}\n","/* eslint-disable camelcase */\n/*\n * SignalToNoiseRatio\n * A dedicated table to show the quality level for a given SNR.\n * The quality ranges are based on Lazarus and Rindel.\n */\n\nimport React from 'react';\n\n// Import Material UI\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {\n  makeStyles,\n  /*\n  MuiThemeProvider,\n  createMuiTheme,*/\n} from '@material-ui/core/styles';\n\n// Import React Icons\nimport {\n  FaRegThumbsDown,\n  FaRegSmile,\n  FaRegMeh,\n  FaRegFrown,\n  FaRegThumbsUp,\n} from 'react-icons/fa';\n\n// Declare styles used in forms\nconst useStyles = makeStyles(theme => ({\n  tableControlFull: {\n    width: '100%',\n  },\n}));\n\nexport default function SignalToNoiseRatio(props) {\n  // Get passed parameter\n  const { signal_to_noise_quality } = props;\n\n  // Load form styles\n  const classes = useStyles();\n\n  // Helper: create SNR table data\n  const createData = (range, name, icon, highlight) => ({\n    range,\n    name,\n    icon,\n    highlight,\n  });\n  const table_data = [\n    createData(\n      '< -9',\n      'Very Bad',\n      <FaRegThumbsDown size={28} />,\n      signal_to_noise_quality === 'Very Bad',\n    ),\n    createData(\n      '(-9, -3]',\n      'Insufficient',\n      <FaRegFrown size={28} />,\n      signal_to_noise_quality === 'Insufficient',\n    ),\n    createData(\n      '(-3, 0]',\n      'Sufficient',\n      <FaRegMeh size={28} />,\n      signal_to_noise_quality === 'Sufficient',\n    ),\n    createData(\n      '(0, 3]',\n      'Satisfactory',\n      <FaRegSmile size={28} />,\n      signal_to_noise_quality === 'Satisfactory',\n    ),\n    createData(\n      '(3, 9]',\n      'Good',\n      <FaRegSmile size={28} />,\n      signal_to_noise_quality === 'Good',\n    ),\n    createData(\n      '> 9',\n      'Very Good',\n      <FaRegThumbsUp size={28} />,\n      signal_to_noise_quality === 'Very Good',\n    ),\n  ];\n\n  // Table content\n  const content = (\n    <Table\n      className={classes.tableControlFull}\n      size=\"small\"\n      aria-label=\"a dense table\"\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>SNR [dB]</TableCell>\n          <TableCell align=\"right\">Acoustical Comfort</TableCell>\n          <TableCell align=\"right\" />\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {table_data.map(row => (\n          <TableRow\n            key={row.name}\n            style={{\n              color: 'black',\n              backgroundColor: row.highlight ? '#c2e4fc' : 'white',\n            }}\n          >\n            <TableCell component=\"th\" scope=\"row\">\n              {row.range}\n            </TableCell>\n            <TableCell align=\"right\">{row.name}</TableCell>\n            <TableCell align=\"right\">{row.icon}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n  return content;\n}\n","/*\n * InfoIcon\n * Icon to display any kind of information in a modal / dialog window\n */\n\n// React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Material UI\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport ContactSupportOutlinedIcon from '@material-ui/icons/ContactSupportOutlined';\n\n// Math\nimport MathJax from 'react-mathjax-preview';\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function InfoIcon(props) {\n  const { title, content } = props;\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {title}{' '}\n      <ContactSupportOutlinedIcon\n        onClick={handleClickOpen}\n        style={{ color: '#0b71b5' }}\n      />\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {title}\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            <MathJax math={content} />\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nInfoIcon.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n","/*\n * AcousticEvaluation\n * This composes methods for acoustic evaluation on the basis of Rindel's prediction model.\n */\n\n// Convert a given absorption call into a factor\nexport const getClothingAbsorptionFactor = (absorption_class) => {\n    try {\n        if (absorption_class.toLowerCase() === \"very-light\") {\n            return 0.2;\n        }\n        else if (absorption_class.toLowerCase() === \"light\") {\n            return 0.3;\n        }\n        else if (absorption_class.toLowerCase() === \"medium\") {\n            return 0.4;\n        }\n        else if (absorption_class.toLowerCase() === \"strong\") {\n            return 0.5;\n        }\n        else {\n            return -1;\n        }\n    }\n    catch {\n        return -999;\n    }\n}\n\n// Compute the equivalent absorption area\nexport const getEquivalentAbsorptionArea = (\n    room_volume,\n    reverberation_time,\n    max_number_guests,\n    guest_clothing_absorption_factor) => {\n    try {\n        return (0.16 * room_volume) / reverberation_time + guest_clothing_absorption_factor * max_number_guests;\n    }\n    catch {\n        return -999;\n    }\n}\n\n// Compute the ambient noise level\nexport const getAmbientNoiseLevel = (\n    equivalent_absorption_area,\n    max_number_guests,\n    relative_speaking_group_size) => {\n    try {\n        /** \n          * NOTE - According to Rindel: \n          * relative_speaking_group_size or 'g' refers to the total number \n          * of people on a table divided by those that are speaking; \n          * as given by Rindel, this is assumed to be typically '3.5'\n        **/\n        let result = [];\n        relative_speaking_group_size.forEach(g => {\n            result.push((93 - 20 * Math.log10((equivalent_absorption_area * g) / max_number_guests)));\n        });\n        return result;\n    }\n    catch {\n        return [];\n    }\n}\n\n// Compute the signal-to-noise ratio\nexport const getSignalToNoiseRatio = (\n    equivalent_absorption_area,\n    max_number_guests,\n    speaking_distance) => {\n    try {\n        /** \n          * According to Rindel: \n          * 'g' refers to the total number of people on a table \n          * divided by those that are speaking; as given by Rindel,\n          * this is assumed to be '3.5'\n        **/\n        const g = 3.5;\n\n        return (10 * Math.log10((2 * equivalent_absorption_area * g) / (16 * Math.PI * speaking_distance * max_number_guests)));\n    }\n    catch {\n        return -999;\n    }\n}\n\n// Compute the acoustic quality for a given SNR\nexport const getSignalToNoiseQuality = (signal_to_noise_ratio) => { // based on Lazarus\n    try {\n        if (signal_to_noise_ratio <= -9.0) {\n            return \"Very Bad\";\n        } else if (signal_to_noise_ratio > -9.0 && signal_to_noise_ratio <= -3.0) {\n            return \"Insufficient\";\n        } else if (signal_to_noise_ratio > -3.0 && signal_to_noise_ratio <= 0.0) {\n            return \"Sufficient\";\n        } else if (signal_to_noise_ratio > 0.0 && signal_to_noise_ratio <= 3.0) {\n            return \"Satisfactory\";\n        } else if (signal_to_noise_ratio > 3.0 && signal_to_noise_ratio <= 9.0) {\n            return \"Good\";\n        } else if (signal_to_noise_ratio > 9.0) {\n            return \"Very Good\";\n        } else {\n            return \"\";\n        }\n    }\n    catch {\n        return \"\";\n    }\n}\n\n// Compute the acoustic capacity\nexport const getAcousticCapacity = (room_volume, reverberation_time) => { \n    try {\n        return parseInt(Math.round(room_volume / (20 * reverberation_time)));\n    }\n    catch {\n        return -999;\n    }\n}\n\n// Compute required reverberation time\nexport const getRequiredReverberationTime = (room_volume, max_number_guests) => {\n    try {\n        // According to Rindel \n        const occupancy_percentage = 0.80;\n\n        return 1/(occupancy_percentage * 20) * (room_volume / max_number_guests);\n    }\n    catch {\n        return -999;\n    }\n}\n\n// Collect evaluation results\nexport const getEvaluationResults = (\n    room_volume, \n    reverberation_time,\n    midfreq_reverberation_time,\n    max_number_guests,\n    guest_clothing_absorption_class,\n    speaking_distance\n) => {\n    // Results object\n    let results = {}\n\n    // Convert guest clothing absorption class into resp. factor\n    const guest_clothing_absorption_factor = getClothingAbsorptionFactor(guest_clothing_absorption_class);\n            \n    // Calculate the equivalent absorption area\n    const equivalent_absorption_area = getEquivalentAbsorptionArea(\n        room_volume,\n        reverberation_time,\n        max_number_guests,\n        guest_clothing_absorption_factor\n    );\n\n    // Calcuate the ambient noise level (for different group sizes)\n    const relative_speaking_group_sizes = [3.5, 1.5, 2.0, 2.5, 3.0, 4.0];\n    const ambient_noise_level = getAmbientNoiseLevel(\n        equivalent_absorption_area, \n        max_number_guests,\n        relative_speaking_group_sizes\n    );\n\n    // Calcuate the signal-to-noise ratio\n    const signal_to_noise_ratio = getSignalToNoiseRatio(\n        equivalent_absorption_area, \n        max_number_guests,\n        speaking_distance\n    );\n\n    // Retrieve the signal-to-noise quality\n    const signal_to_noise_quality = getSignalToNoiseQuality(signal_to_noise_ratio);\n    \n    // Calculate the acoustic capacity\n    const acoustic_capacity = getAcousticCapacity(room_volume, \n                                                  midfreq_reverberation_time > 0 ? \n                                                  midfreq_reverberation_time : \n                                                  reverberation_time);\n    \n    // Calculate required reverberation time\n    const required_reverberation_time = getRequiredReverberationTime(room_volume,\n                                                                     max_number_guests);\n    \n    // Return API call\n    results[\"guest_clothing_absorption_factor\"] = guest_clothing_absorption_factor;\n    results[\"equivalent_absorption_area\"]       = equivalent_absorption_area;\n    results[\"ambient_noise_level\"]              = ambient_noise_level[0];\n    results[\"signal_to_noise_ratio\"]            = signal_to_noise_ratio;\n    results[\"signal_to_noise_quality\"]          = signal_to_noise_quality;\n    results[\"acoustic_capacity\"]                = acoustic_capacity;\n    relative_speaking_group_sizes.forEach((g, i) => {\n        results[\"ambient_noise_level_g\"+g.toString()] = ambient_noise_level[i];\n    });\n    results[\"required_reverberation_time\"] = required_reverberation_time;\n\n    return results;\n}\n","/* eslint-disable no-prototype-builtins */\n/*\n * Results\n *\n * @desc This page receives the user inputs, passes them onto a dedicated API and receives and visualizes the results.\n * @author Kateryna Proissl\n */\n\n// Import React base libraries\nimport React, { useEffect } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\n// Import Material UI libraries\nimport {\n  makeStyles,\n  MuiThemeProvider,\n  createMuiTheme,\n} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\n// Import local dependencies\nimport Container from './Container';\nimport AmbientNoiseLevel from './AmbientNoiseLevel';\nimport SignalToNoiseRatio from './SignalToNoiseRatio';\nimport InfoIcon from './InfoIcon';\n\n// Import model\nimport { \n  getEvaluationResults,\n\n} from './AcousticEvaluation';\n\n// Declare styles used in forms\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '50%',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n  paperControl: {\n    padding: theme.spacing(3, 2),\n  },\n  buttonControl: {\n    textAlign: 'right',\n    marginTop: theme.spacing(1),\n  },\n  tableControl: {\n    width: '50%',\n  },\n  tableControlFull: {\n    width: '100%',\n  },\n  expansionHeading: {\n    fontWeight: 'bold',\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    marginLeft: theme.spacing(2),\n  },\n  expansionSecondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  expansionDetails: {\n    flexDirection: 'column',\n  },\n}));\n\n// Declare color theme matching 'Frauenhofer color'\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#0b71b5' },\n    secondary: { main: '#0b71b5' },\n  },\n});\n\n// Declare static formula description: equivalent absorption area\nconst equivalentAbsorptionAreaDescription = String.raw`\n  The equivalent absorption area is given by\n\n  $$A = \\frac{0.16 \\cdot V}{T} + A_p \\cdot N$$\n\n  with the restaurant volume $V$, the reverberation time $T$, the \n  number of guests $N$ and the sound absorption per person $A_p$.\n`;\n\n// Declare static formula description: ambient noise level\nconst ambientNoiseLevelDescription = String.raw`\n  The ambient noise level corresponds to the A-weighted sound pressure level \n  based on the simplified prediction model by J.H. Rindel:\n\n  $$L_{N,A} = 93 - 20\\text{lg}\\frac{A \\cdot g}{N}$$\n\n  with the equivalent absorption area $A$, the number of guests $N$ and the \n  average number of people per speaking person $g$ (which is set to 3.5 \n  as recommended by Rindel for restaurants).\n`;\n\n// Declare static formula description: signal to noise ratio\nconst signalToNoiseRatioDescription = String.raw`\n  The signal-to-noise ratio corresponds to the difference between the \n  A-weighted sound pressure level of the direct sound from a speaking \n  person in a certain distance $r$ and the ambient noise in the room:\n\n  $$\\text{SNR} = 10\\text{lg}\\frac{Q \\cdot A \\cdot g}{16 \\pi r^2 N}$$\n\n  with the directivity of a speaking person $Q$ (which is set to 2, assumed\n  in front of the mouth), the equivalent absorption area $A$, the number of \n  guests $N$ and the average number of people per speaking person $g$ \n  (which is set to 3.5 as recommended by Rindel for restaurants). \n\n  Please note, this formula is only valid if the ambient noise level \n  ranges between 45 dB and 85 dB, i.e. corresponding to an SNR \n  between -10 dB to +10 dB.\n`;\n\n// Declare static formula description: acoustic capacity\nconst acousticCapacityDescription = String.raw`\n  The acoustic capacity corresponds to an estimate of the maximum number \n  of guests in a room while still allowing sufficient quality of verbal \n  communication:\n\n  $$N_{\\text{max}} \\simeq \\frac{V}{20T}$$\n\n  with the restaurant volume $V$ and the reverberation time $T$ at \n  mid-frequencies 500 Hz to 1000 Hz.\n`;\n\n// Declare static formula description: required reverberation time\nconst requiredReverberationTimeDescription = String.raw`\nThe required reverberation time is derived from the acoustic capacity \nby assuming an 80% occupancy:\n\n$$T \\leq \\frac{1}{0.80 \\times 20} \\cdot \\frac{V}{N_{\\text{max}}} \\simeq 0.063 \\cdot \\frac{V}{N_{\\text{max}}}$$.\n`;\n\n// Main function\nexport default function Results(props) {\n  // Evaluate data passed by source -------------------->\n  let userInput = false;\n  // eslint-disable-next-line react/prop-types\n  if (typeof props.location.state !== 'undefined') {\n    // eslint-disable-next-line react/prop-types\n    userInput = props.location.state.data;\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('redirecting ...');\n  }\n  // ---------------------------------------------------<\n\n  // Redirecting back home if user input is missing\n  const renderRedirect = () => {\n    if (!userInput) {\n      return <Redirect to=\"/\" />;\n    }\n    return null;\n  };\n\n  // Load form styles\n  const classes = useStyles();\n\n  // Initialize state with default values of parameters\n  const [state, setState] = React.useState({ userInput });\n\n  // Get value from user input\n  const getUserInputParam = (name) => {\n    let value = NaN;\n    state.userInput.forEach(item => {\n      if (item.name === name) {\n        value = item.value;\n      }\n    });\n    return value;\n  };\n\n  // Single eval of user input\n  useEffect(() => {\n    if (userInput) {\n      setState({\n        ...state,\n        result: getEvaluationResults(\n          getUserInputParam(\"room_volume\"),\n          getUserInputParam(\"reverberation_time\"),\n          getUserInputParam(\"midfreq_reverberation_time\"),\n          getUserInputParam(\"max_number_guests\"),\n          getUserInputParam(\"guest_clothing_absorption_class\"),\n          getUserInputParam(\"speaking_distance\")\n        ),\n        showResults: true,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Helper: fix floats to string\n  const getFloat = _num => {\n    const num = parseFloat(_num);\n    return num.toFixed(1);\n  };\n\n  // Helper: compute ratio of strings\n  const getFloatRatio = (nom, div) => parseFloat(nom) / parseFloat(div);\n\n  // Helper: extract from user input\n  const getUserInputValue = name => {\n    let result = null;\n    state.userInput.forEach(item => {\n      if (item.name === name) {\n        result = item.value;\n      }\n    });\n    return result;\n  };\n\n  // Helper: convert sound absorption per person\n  const getSoundAbsorptionPerPerson = label => {\n    if (label === 'very-light') {\n      return '0.2';\n    }\n    if (label === 'light') {\n      return '0.3';\n    }\n    if (label === 'medium') {\n      return '0.4';\n    }\n    if (label === 'strong') {\n      return '0.5';\n    }\n    if (label === '0') {\n      return '-';\n    }\n    return label;\n  };\n\n  // Helper: show signal to noise ratio limit\n  const getSignalToNoiseRatioLimitNotice = () => {\n    if (\n      parseFloat(state.result.ambient_noise_level) < 45 ||\n      parseFloat(state.result.ambient_noise_level) > 85\n    ) {\n      return (\n        <p>\n          Please note that this result is invalid since the\n          <br />\n          underlying calculation (see information icon) applies\n          <br />\n          only to ambient noise levels between 45 dB and 85 dB.\n        </p>\n      );\n    }\n    return '';\n  };\n\n  // Return object to render for display on screen\n  return (\n    <Container>\n      {renderRedirect()}\n      {!state.showResults ? (\n        <div>{state.errorMsg}</div>\n      ) : (\n        <MuiThemeProvider theme={theme}>\n          The following evaluation is based on your provided input:\n          <br />\n          <br />\n          <Table\n            className={classes.tableControl}\n            size=\"small\"\n            aria-label=\"a dense table\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>Your Input Parameter</TableCell>\n                <TableCell align=\"right\">Value</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {state.userInput.map(row => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.label}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {getSoundAbsorptionPerPerson(row.value)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <br />\n          <br />\n          {state.showResults ? (\n            <Paper className={classes.paperControl}>\n              <Typography variant=\"subtitle1\">\n                <b>Evaluation Results</b>\n              </Typography>\n              <Typography variant=\"body2\">\n                For more information about each result, please click on the\n                information icon.\n              </Typography>\n              <Table\n                className={classes.tableControlFull}\n                aria-label=\"simple table\"\n              >\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Evaluation Type</TableCell>\n                    <TableCell align=\"left\">Result</TableCell>\n                    <TableCell align=\"left\">Explanation</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow\n                    key=\"ac\"\n                    style={{\n                      color: '#0b71b5',\n                      backgroundColor: 'white',\n                    }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">\n                      <InfoIcon\n                        title=\"Equivalent Absorption Area [m^2]\"\n                        content={equivalentAbsorptionAreaDescription}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      {getFloat(state.result.equivalent_absorption_area)}\n                    </TableCell>\n                    <TableCell align=\"left\" />\n                  </TableRow>\n                  <TableRow\n                    key=\"anl\"\n                    style={{\n                      color: '#0b71b5',\n                      backgroundColor: 'white',\n                    }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">\n                      <InfoIcon\n                        title=\"Ambient Noise Level [dB]\"\n                        content={ambientNoiseLevelDescription}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      {getFloat(state.result.ambient_noise_level)}\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      <AmbientNoiseLevel\n                        x={getFloatRatio(\n                          getUserInputValue('max_number_guests'),\n                          state.result.acoustic_capacity,\n                        )}\n                        y={state.result.ambient_noise_level}\n                      />\n                    </TableCell>\n                  </TableRow>\n                  <TableRow\n                    key=\"snr\"\n                    style={{\n                      color: '#0b71b5',\n                      backgroundColor: 'white',\n                    }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">\n                      <InfoIcon\n                        title=\"Signal-To-Noise Ratio [dB]\"\n                        content={signalToNoiseRatioDescription}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      {getFloat(state.result.signal_to_noise_ratio)}\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      <SignalToNoiseRatio\n                        signal_to_noise_quality={\n                          state.result.signal_to_noise_quality\n                        }\n                      />\n                      <Typography color=\"error\">\n                        {getSignalToNoiseRatioLimitNotice()}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow\n                    key=\"ac\"\n                    style={{\n                      color: '#0b71b5',\n                      backgroundColor: 'white',\n                    }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">\n                      <InfoIcon\n                        title=\"Acoustic Capacity [-]\"\n                        content={acousticCapacityDescription}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      {state.result.acoustic_capacity}\n                    </TableCell>\n                    <TableCell align=\"left\" />\n                  </TableRow>\n                  <TableRow\n                    key=\"ac\"\n                    style={{\n                      color: '#0b71b5',\n                      backgroundColor: 'white',\n                    }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">\n                      <InfoIcon\n                        title=\"Required Reverberation Time [s]\"\n                        content={requiredReverberationTimeDescription}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      {getFloat(state.result.required_reverberation_time)}\n                    </TableCell>\n                    <TableCell align=\"left\" />\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </Paper>\n          ) : null}\n          <Grid container spacing={0} direction=\"column\" alignItems=\"flex-end\">\n            <Grid item xs={3}>\n              <Link to=\"/\" style={{ textDecoration: 'none' }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.buttonControl}\n                >\n                  New Evaluation\n                </Button>\n              </Link>\n            </Grid>\n          </Grid>\n        </MuiThemeProvider>\n      )}\n    </Container>\n  );\n}\n"],"sourceRoot":""}