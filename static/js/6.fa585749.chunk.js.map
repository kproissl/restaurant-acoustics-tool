{"version":3,"sources":["pages/HomePage/Container.js","pages/HomePage/index.js"],"names":["Container","styled","section","useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","width","formControl","margin","paperControl","padding","buttonControl","textAlign","marginTop","tableControl","expansionHeading","fontWeight","fontSize","typography","pxToRem","flexBasis","flexShrink","expansionSecondaryHeading","color","palette","text","secondary","expansionDetails","flexDirection","createMuiTheme","primary","main","stateVars","panelExpanded","paramV","panelVComplete","panelVErrorMsg","paramT","paramTmid","panelTComplete","panelTErrorMsg","paramN","panelNComplete","panelNErrorMsg","paramApClass","panelApComplete","paramR","reverbTimeInputProps","step","HomePage","classes","React","useState","state","setState","handleChange","name","event","persist","isNaN","target","value","ok","parseFloat","val","parseInt","label","String","handlePanel","isExpanded","readyToGo","Paper","className","hidden","showResults","Accordion","expanded","onChange","AccordionSummary","expandIcon","aria-controls","id","size","Typography","AccordionDetails","TextField","type","InputLabelProps","shrink","variant","helperText","InputProps","endAdornment","InputAdornment","position","inputProps","FormControl","component","FormGroup","FormControlLabel","control","Checkbox","checked","Grid","container","direction","alignItems","item","xs","to","pathname","data","style","textDecoration","Button","disabled"],"mappings":"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","file":"static/js/6.fa585749.chunk.js","sourcesContent":["// Styled containter of all components\nimport styled from 'styled-components';\n\nconst Container = styled.section`\n  padding: 1em;\n`;\n\nexport default Container;\n","/*\n * HomePage\n *\n * @desc This page is shown at the root route '/' and provides the interfaces for users to enter model parameters and trigger the evaluation at path '/results'.\n * @author Kateryna Proissl\n */\n\n// Import React base libraries\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Import Material UI libraries\nimport {\n  makeStyles,\n  MuiThemeProvider,\n  createMuiTheme,\n} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n// Import React Icons\nimport { FaCheck, FaTerminal } from 'react-icons/fa';\n\n// Import local dependencies\nimport Container from './Container';\n\n// Declare styles used in forms\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '50%',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n  paperControl: {\n    padding: theme.spacing(3, 2),\n  },\n  buttonControl: {\n    textAlign: 'right',\n    marginTop: theme.spacing(1),\n  },\n  tableControl: {\n    width: '50%',\n  },\n  expansionHeading: {\n    fontWeight: 'bold',\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    marginLeft: theme.spacing(2),\n  },\n  expansionSecondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  expansionDetails: {\n    flexDirection: 'column',\n  },\n}));\n\n// Declare color theme matching 'Frauenhofer color'\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#0b71b5' },\n    secondary: { main: '#0b71b5' },\n  },\n});\n\n// Declare state variables with default values (i.e. used when page is loaded)\nconst stateVars = {\n  // Expanded panel name\n  panelExpanded: '',\n\n  // User Input Parameter: room volume\n  paramV: '',\n\n  // Panel input completed for 'paramV'\n  panelVComplete: false,\n\n  // Panel input error message for 'paramV'\n  panelVErrorMsg: '',\n\n  // User Input Parameter: reverberation time\n  paramT: '',\n\n  // User Input Parameter: mid-frequency reverberation time (500 - 1000 Hz)\n  paramTmid: '',\n\n  // Panel input completed for 'paramT'\n  panelTComplete: false,\n\n  // Panel input error message for 'paramT'\n  panelTErrorMsg: '',\n\n  // User Input Parameter: number of restaurant guests\n  paramN: '',\n\n  // Panel input completed for 'paramN'\n  panelNComplete: false,\n\n  // Panel input error message for 'paramN'\n  panelNErrorMsg: '',\n\n  // User Input Parameter: absorption class from clothing of restaurant guests\n  paramApClass: '',\n\n  // Panel input completed for 'paramAp'\n  panelApComplete: false,\n\n  // Panel input Parameter: speaking distance\n  paramR: '1',\n};\n\n// Reverberation time input props\nconst reverbTimeInputProps = {\n  step: 0.1,\n  //  endAdornment: <InputAdornment position=\"end\">s</InputAdornment>,\n};\n\n// Main function\nexport default function HomePage() {\n  // Load form styles\n  const classes = useStyles();\n\n  // Initialize state with default values of parameters\n  const [state, setState] = React.useState(stateVars);\n\n  // Handle change of user input parameters\n  const handleChange = name => event => {\n    // Let the event persist\n    event.persist();\n\n    // Ignore empty user inputs\n    // eslint-disable-next-line no-restricted-globals\n    if (!isNaN(event.target.value)) {\n      // Evaluation of user input for room volume\n      if (name === 'paramV') {\n        // If entered value is positive and below 8000,\n        // then declare panel as completed,\n        // otherwise publish error message to screen\n        const ok =\n          parseFloat(event.target.value) > 0 &&\n          parseFloat(event.target.value) < 8000;\n        setState({\n          ...state,\n          [name]: event.target.value,\n          panelVComplete: ok,\n          panelVErrorMsg: ok\n            ? ''\n            : 'The room volume must be a positive number and below 8000.',\n        });\n      }\n      // Evaluation of user input for reverberation time\n      else if (name === 'paramT') {\n        // If entered value is positive, then declare panel as completed,\n        // otherwise publish error message to screen\n        const ok = parseFloat(event.target.value) > 0;\n        setState({\n          ...state,\n          [name]: event.target.value,\n          panelTComplete: ok,\n          panelTErrorMsg: ok\n            ? ''\n            : 'The reverberation time must be a positive number.',\n        });\n      }\n      // Evaluation of user input for reverberation time\n      else if (name === 'paramTmid') {\n        // If entered value is positive, then declare panel as completed,\n        // otherwise publish error message to screen\n        const ok = parseFloat(event.target.value) > 0;\n        setState({\n          ...state,\n          [name]: event.target.value,\n          panelTComplete: ok && parseFloat(state.paramT) > 0,\n          panelTErrorMsg: ok\n            ? ''\n            : 'The reverberation time must be a positive number.',\n        });\n      }\n      // Evaluation of user input for number of guests\n      else if (name === 'paramN') {\n        // If entered value (integer) is positive, then declare panel as completed,\n        // otherwise publish error message to screen\n        let val = parseInt(event.target.value, 10);\n        let ok = false;\n        // eslint-disable-next-line no-restricted-globals\n        if (isNaN(val)) {\n          val = '';\n        } else if (val > 0) {\n          ok = true;\n        }\n        setState({\n          ...state,\n          [name]: val,\n          panelNComplete: ok,\n          panelNErrorMsg: ok\n            ? ''\n            : 'The number of guests must be a positive number.',\n        });\n      }\n    }\n    // Evaluation of user input for clothing of guests\n    // Note: convertion to respective factor by API\n    if (name === 'paramApClass') {\n      const label = String(event.target.value);\n      setState({\n        ...state,\n        [name]: label,\n        panelApComplete: true,\n        panelExpanded: '',\n      });\n    }\n  };\n\n  // Handle expansion of panels (one at a time)\n  const handlePanel = name => (event, isExpanded) => {\n    // Let the event persist\n    event.persist();\n\n    // Set name of expaned panel\n    // eslint-disable-next-line no-restricted-globals\n    setState({ ...state, panelExpanded: isExpanded ? name : '' });\n  };\n\n  // Evaluation if we are ready to go to results\n  const readyToGo = () =>\n    !state.panelVComplete ||\n    (!state.panelTComplete && parseFloat(state.paramTmid) === 0) ||\n    !state.panelNComplete ||\n    !state.panelApComplete;\n\n  // Compile final user input\n  const userInput = () => [\n    { label: 'Room Volume [m^3]', name: 'room_volume', value: state.paramV },\n    {\n      label: 'Reverberation Time [s]',\n      name: 'reverberation_time',\n      value: state.paramT,\n    },\n    {\n      label: 'Mid-Frequency Reverberation Time [s]',\n      name: 'midfreq_reverberation_time',\n      value: parseFloat(state.paramTmid) > 0 ? state.paramTmid : '0',\n    },\n    {\n      label: 'Maximal occupancy [-]',\n      name: 'max_number_guests',\n      value: state.paramN,\n    },\n    {\n      label: 'Sound absorption per person [m^2]',\n      name: 'guest_clothing_absorption_class',\n      value: state.paramApClass,\n    },\n    {\n      label: 'Typical speaking distance [m]',\n      name: 'speaking_distance',\n      value: state.paramR,\n    },\n  ];\n\n  // Return object to render for display on screen\n  return (\n    <Container>\n      <MuiThemeProvider theme={theme}>\n        <b>\n          A simple prediction model for the speech noise level and the quality of vocal communication.\n        </b>\n        <br />\n        <br />\n        <Paper className={classes.paperControl} hidden={state.showResults}>\n          Please provide the following information by clicking on each parameter panel:\n          <br />\n          <br />\n          <Accordion\n            expanded={state.panelExpanded === 'panelV'}\n            onChange={handlePanel('panelV')}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1bh-content\"\n              id=\"panel1bh-header\"\n            >\n              {!state.panelVComplete && (<FaCheck\n                size={24}\n                color=\"#0b71b5\"\n              />)}\n              {state.panelVComplete && (<FaTerminal size={24} />)}\n              <Typography className={classes.expansionHeading}>\n                Room Volume\n              </Typography>\n              <Typography\n                className={classes.expansionSecondaryHeading}\n                hidden={!state.panelVComplete}\n              >\n                {state.paramV} m<sup>3</sup>\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails className={classes.expansionDetails}>\n              <Typography>\n                The whole volume of the restaurant shall include the entire open\n                space, thus including e.g. a bar area, open kitchen, open\n                wardrobe, etc. However, the optimal room volume should not\n                exceed 8000 cubic meters.\n              </Typography>\n              <TextField\n                id=\"volume\"\n                label=\"Room Volume\"\n                type=\"number\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"normal\"\n                variant=\"outlined\"\n                helperText=\"Please provide the volume in cubic meters.\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      m<sup>3</sup>\n                    </InputAdornment>\n                  ),\n                }}\n                value={state.paramV}\n                onChange={handleChange('paramV')}\n              />\n              <Typography color=\"error\">{state.panelVErrorMsg}</Typography>\n            </AccordionDetails>\n          </Accordion>\n          <Accordion\n            expanded={state.panelExpanded === 'panelT'}\n            onChange={handlePanel('panelT')}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel2bh-content\"\n              id=\"panel2bh-header\"\n            >\n              {!state.panelTComplete && (<FaCheck\n                size={24}\n                color=\"#0b71b5\"\n              />)}\n              {state.panelTComplete && (<FaTerminal size={24} />)}\n              <Typography className={classes.expansionHeading}>\n                Reverberation Time\n              </Typography>\n              <Typography\n                className={classes.expansionSecondaryHeading}\n                hidden={!state.panelTComplete}\n              >\n                {state.paramT} s\n                {parseFloat(state.paramTmid) > 0\n                  ? ` / ${state.paramTmid} s (mid-freq)`\n                  : ''}\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails className={classes.expansionDetails}>\n              <Typography>\n                The reverberation time is the time, in seconds, required for the\n                average sound in the restaurant (in unoccupied state) to\n                decrease by 60 dB after a source stops generating sound. In\n                order to estimate the acoustic capacity, the reverberation time\n                at mid-frequencies (500 Hz to 1000 Hz) is used, which may be\n                provided additonally.\n              </Typography>\n              <TextField\n                id=\"reverberation-time\"\n                label=\"Reverberation Time\"\n                type=\"number\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"normal\"\n                variant=\"outlined\"\n                helperText=\"Please provide the reverberation time in seconds.\"\n                inputProps={reverbTimeInputProps}\n                // eslint-disable-next-line react/jsx-no-duplicate-props\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">s</InputAdornment>\n                  ),\n                }}\n                value={state.paramT}\n                onChange={handleChange('paramT')}\n              />\n              <TextField\n                id=\"midfreq-reverberation-time\"\n                label=\"Mid-Frequency Reverberation Time (500Hz and 1kHz)\"\n                type=\"number\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"normal\"\n                variant=\"outlined\"\n                helperText=\"Please provide the mid-frequency reverberation time in seconds (optional).\"\n                inputProps={reverbTimeInputProps}\n                // eslint-disable-next-line react/jsx-no-duplicate-props\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">s</InputAdornment>\n                  ),\n                }}\n                value={state.paramTmid}\n                onChange={handleChange('paramTmid')}\n              />\n              <Typography color=\"error\">{state.panelTErrorMsg}</Typography>\n            </AccordionDetails>\n          </Accordion>\n          <Accordion\n            expanded={state.panelExpanded === 'panelN'}\n            onChange={handlePanel('panelN')}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel3bh-content\"\n              id=\"panel3bh-header\"\n            >\n              {!state.panelNComplete && (<FaCheck\n                size={24}\n                color=\"#0b71b5\"\n              />)}\n              {state.panelNComplete && (<FaTerminal size={24} />)}\n              <Typography className={classes.expansionHeading}>\n                Number of Guests\n              </Typography>\n              <Typography\n                className={classes.expansionSecondaryHeading}\n                hidden={!state.panelNComplete}\n              >\n                {state.paramN}\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails className={classes.expansionDetails}>\n              <Typography>\n                The number of guests of the restaurant shall be the maximal\n                occupancy (e.g. number of available seats).\n              </Typography>\n              <TextField\n                id=\"max-number-persons\"\n                label=\"Maximal Number of Guests\"\n                type=\"number\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"normal\"\n                variant=\"outlined\"\n                helperText=\"Please provide the maximal number of guests.\"\n                value={state.paramN}\n                onChange={handleChange('paramN')}\n              />\n              <Typography color=\"error\">{state.panelNErrorMsg}</Typography>\n            </AccordionDetails>\n          </Accordion>\n          <Accordion\n            expanded={state.panelExpanded === 'panelAp'}\n            onChange={handlePanel('panelAp')}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel4bh-content\"\n              id=\"panel4bh-header\"\n            >\n              {!state.panelApComplete && (<FaCheck\n                size={24}\n                color=\"#0b71b5\"\n              />)}\n              {state.panelApComplete && (<FaTerminal size={24} />)}\n              <Typography className={classes.expansionHeading}>\n                Clothing of Guests\n              </Typography>\n              <Typography\n                className={classes.expansionSecondaryHeading}\n                hidden={!state.panelApComplete}\n              >\n                {state.paramApClass}\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails className={classes.expansionDetails}>\n              <Typography>\n                The clothing of guests in the restaurant influences the\n                absorption of sound. The typical values of sound absorption per\n                person vary between 0.2 m<sup>2</sup> (e.g. a woman in a summer\n                dress) to 0.5 m<sup>2</sup> (e.g. a man in a winter jacket).\n              </Typography>\n              <FormControl component=\"fieldset\" className={classes.formControl}>\n                <FormGroup>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={state.paramApClass === 'very-light'}\n                        onChange={handleChange('paramApClass')}\n                        value=\"very-light\"\n                      />\n                    }\n                    label=\"Very Light (0.2 m^2)\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={state.paramApClass === 'light'}\n                        onChange={handleChange('paramApClass')}\n                        value=\"light\"\n                      />\n                    }\n                    label=\"Light (0.3 m^2)\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={state.paramApClass === 'medium'}\n                        onChange={handleChange('paramApClass')}\n                        value=\"medium\"\n                      />\n                    }\n                    label=\"Medium (0.4 m^2)\"\n                  />\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={state.paramApClass === 'strong'}\n                        onChange={handleChange('paramApClass')}\n                        value=\"strong\"\n                      />\n                    }\n                    label=\"Strong (0.5 m^2)\"\n                  />\n                </FormGroup>\n              </FormControl>\n            </AccordionDetails>\n          </Accordion>\n          <br />\n          <Grid container spacing={0} direction=\"column\" alignItems=\"flex-end\">\n            <Grid item xs={3}>\n              <Link\n                to={\n                  readyToGo()\n                    ? '/'\n                    : {\n                      pathname: '/results',\n                      state: {data: userInput(),},\n                    }\n                }\n                style={{ textDecoration: 'none' }}\n              >\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.buttonControl}\n                  disabled={readyToGo()}\n                >\n                  Evaluate\n                </Button>\n              </Link>\n            </Grid>\n          </Grid>\n        </Paper>\n      </MuiThemeProvider>\n    </Container>\n  );\n}\n"],"sourceRoot":""}